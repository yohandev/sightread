{
  "version": 3,
  "sources": ["wasm-stub:/Users/yohan/dev/sightread/src/rs/mod.wasm", "../src/rs/mod.js", "../src/js/main.js"],
  "sourcesContent": ["\n            import wasm from \"/Users/yohan/dev/sightread/src/rs/mod.wasm\"\n\n            export default (imports) => WebAssembly\n                .instantiate(wasm, imports)\n                .then(result => result.instance.exports)\n            ", "import load from './mod.wasm'\n\n/** @type {WebAssembly.Exports} */\nlet exports = undefined;\n\n/** bindings over WASM module */\nexport default\n{\n    /** begins loading the WASM module */\n    async load()\n    {\n        exports = await load();\n\n        console.log(exports)\n    },\n\n    /** @returns {WebAssembly.Memory} */\n    get memory() { return exports.memory },\n\n    /** a wrapper over wasm memory, with 32-bit elements */\n    arr: class WasmArray\n    {\n        /**\n         * create a new wrapper over wasm memory \n         * @param {number} ptr byte offset, aligned to 32-bits\n         * @param {number} len number of elements\n         */\n        constructor(ptr, len)\n        {\n            /** @type {ArrayBuffer} */\n            this.buf = () => exports.memory.buffer;\n\n            this.ptr = ptr;\n            this.len = len;\n        }\n        /** interpret this array as an `i32[]` */\n        get i32() { return new Int32Array(this.buf(), this.ptr, this.len) }\n        /** interpret this array as an `f32[]` */\n        get f32() { return new Float32Array(this.buf(), this.ptr, this.len) }\n    },\n    /**\n     * allocate a new array in WASM memory\n     * @param {number} len length of array to allocate\n     */\n    alloc(len)\n    {\n        return new this.arr(exports.alloc32(len), len)\n    },\n    /**\n     * deallocate an array allocated with `alloc` in WASM memory\n     * @param {WasmArray} arr array to deallocate\n     */\n    dealloc(arr)\n    {\n        exports.dealloc32(arr.ptr, arr.len);\n    },\n    /**\n     * extracts the frequencies out of a signal, overwriting the input\n     * buffer of `f32` samples with half as many `(f32, f32)`(packed)\n     * tuples representing (frequency, amplitude)\n     * \n     * @param {WasmArray} pcm input samples, of some power of 2 length\n     * @param {number} fs sampling frequency\n     * @returns {WasmArray} (frequency, amplitude)[pcm.len / 2]\n     */\n    frequencies(pcm, fs)\n    {\n        exports.frequencies(pcm.ptr, pcm.len, fs);\n\n        return pcm;\n    }\n}", "import wasm from '../rs/mod'\n\nconst wave = (i, f, fs) =>\n{\n    // overtones for a piano key\n    const OVERTONES = [1.0, 0.389045, 0.063095, 0.1, 0.050699, 0.017782, 0.0204173];\n    // simple sine wave\n    const sine = (fq) =>\n    {\n        return Math.sin((2 * Math.PI * fq * i) / fs);\n    }\n    // go through each overtone\n    return OVERTONES\n        .map((amp, i) => amp * sine(f * Math.pow(2, i)))\n        .reduce((a, b) => a + b, 0);\n}\n\nconst main = async () =>\n{\n    await wasm.load()\n\n    let arr = wasm.alloc(4096);\n\n    // piano A note wave\n    for (let i = 0; i < arr.len; i++)\n    {\n        arr.f32[i] = wave(i, 440.0, 44_100);\n    }\n\n    // FFT\n    let fqAmp = wasm.frequencies(arr, 44_100);\n\n    const w = window.innerWidth;\n    const h = window.innerHeight;\n\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    const lin = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');\n\n    svg.setAttribute('width', w);\n    svg.setAttribute('height', h);\n\n    lin.style.stroke = '#000';\n    lin.style.strokeWidth = '5px';\n\n    svg.appendChild(lin);\n    document.body.appendChild(svg);\n    \n    let pts = \"\";\n    for (let i = 0; i < arr.len; i += 2)\n    {\n        const frq = fqAmp.f32[i] * (w / arr.len);\n        const amp = h - 30 - fqAmp.f32[i + 1] * (h * 0.9);\n\n        pts += `${frq}, ${amp} `\n    }\n    lin.setAttribute('points', pts);\n\n    wasm.dealloc(arr);\n}\n\nmain();"],
  "mappings": "imtDAGY,GAAO,GAAQ,AAAC,GAAY,YACvB,YAAY,EAAM,GAClB,KAAK,GAAU,EAAO,SAAS,SCFhD,GAAI,GAGG,EACP,MAEU,OACN,CACI,EAAU,KAAM,KAEhB,QAAQ,IAAI,OAIZ,SAAS,CAAE,MAAO,GAAQ,QAG9B,IAAK,KACL,CAMI,YAAY,EAAK,EACjB,CAEI,KAAK,IAAM,IAAM,EAAQ,OAAO,OAEhC,KAAK,IAAM,EACX,KAAK,IAAM,KAGX,MAAM,CAAE,MAAO,IAAI,YAAW,KAAK,MAAO,KAAK,IAAK,KAAK,QAEzD,MAAM,CAAE,MAAO,IAAI,cAAa,KAAK,MAAO,KAAK,IAAK,KAAK,OAMnE,MAAM,EACN,CACI,MAAO,IAAI,MAAK,IAAI,EAAQ,QAAQ,GAAM,IAM9C,QAAQ,EACR,CACI,EAAQ,UAAU,EAAI,IAAK,EAAI,MAWnC,YAAY,EAAK,EACjB,CACI,SAAQ,YAAY,EAAI,IAAK,EAAI,IAAK,GAE/B,ICnEf,GAAM,GAAO,CAAC,EAAG,EAAG,IACpB,CAEI,GAAM,GAAY,CAAC,EAAK,QAAU,QAAU,GAAK,QAAU,QAAU,UAE/D,EAAO,AAAC,GAEH,KAAK,IAAK,EAAI,KAAK,GAAK,EAAK,EAAK,GAG7C,MAAO,GACF,IAAI,CAAC,EAAK,IAAM,EAAM,EAAK,EAAI,KAAK,IAAI,EAAG,KAC3C,OAAO,CAAC,EAAG,IAAM,EAAI,EAAG,IAG3B,EAAO,SACb,CACI,KAAM,GAAK,OAEX,GAAI,GAAM,EAAK,MAAM,MAGrB,OAAS,GAAI,EAAG,EAAI,EAAI,IAAK,IAEzB,EAAI,IAAI,GAAK,EAAK,EAAG,IAAO,OAIhC,GAAI,GAAQ,EAAK,YAAY,EAAK,OAE5B,EAAI,OAAO,WACX,EAAI,OAAO,YAEX,EAAM,SAAS,gBAAgB,6BAA8B,OAC7D,EAAM,SAAS,gBAAgB,6BAA8B,YAEnE,EAAI,aAAa,QAAS,GAC1B,EAAI,aAAa,SAAU,GAE3B,EAAI,MAAM,OAAS,OACnB,EAAI,MAAM,YAAc,MAExB,EAAI,YAAY,GAChB,SAAS,KAAK,YAAY,GAE1B,GAAI,GAAM,GACV,OAAS,GAAI,EAAG,EAAI,EAAI,IAAK,GAAK,EAClC,CACI,GAAM,GAAM,EAAM,IAAI,GAAM,GAAI,EAAI,KAC9B,EAAM,EAAI,GAAK,EAAM,IAAI,EAAI,GAAM,GAAI,IAE7C,GAAO,GAAG,MAAQ,KAEtB,EAAI,aAAa,SAAU,GAE3B,EAAK,QAAQ,IAGjB",
  "names": []
}
