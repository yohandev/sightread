{
  "version": 3,
  "sources": ["wasm-stub:/Users/yohan/dev/sightread/src/rs/mod.wasm", "../src/rs/mod.js", "../src/js/draw.js", "../src/js/mic.js", "../src/js/main.js"],
  "sourcesContent": ["\n            import wasm from \"/Users/yohan/dev/sightread/src/rs/mod.wasm\"\n\n            export default (imports) => WebAssembly\n                .instantiate(wasm, imports)\n                .then(result => result.instance.exports)\n            ", "import load from './mod.wasm'\n\n/** @type {WebAssembly.Exports} */\nlet exports = undefined;\n\n/** bindings over WASM module */\nexport default\n{\n    /** begins loading the WASM module */\n    async load()\n    {\n        exports = await load();\n\n        console.log(exports)\n    },\n\n    /** @returns {WebAssembly.Memory} */\n    get memory() { return exports.memory },\n\n    /** a wrapper over wasm memory, with 32-bit elements */\n    arr: class WasmArray\n    {\n        /**\n         * create a new wrapper over wasm memory \n         * @param {number} ptr byte offset, aligned to 32-bits\n         * @param {number} len number of elements\n         */\n        constructor(ptr, len)\n        {\n            /** @type {ArrayBuffer} */\n            this.buf = () => exports.memory.buffer;\n\n            this.ptr = ptr;\n            this.len = len;\n        }\n        /** interpret this array as an `i32[]` */\n        get i32() { return new Int32Array(this.buf(), this.ptr, this.len) }\n        /** interpret this array as an `f32[]` */\n        get f32() { return new Float32Array(this.buf(), this.ptr, this.len) }\n    },\n    /**\n     * allocate a new array in WASM memory\n     * @param {number} len length of array to allocate\n     */\n    alloc(len)\n    {\n        return new this.arr(exports.alloc32(len), len)\n    },\n    /**\n     * deallocate an array allocated with `alloc` in WASM memory\n     * @param {WasmArray} arr array to deallocate\n     */\n    dealloc(arr)\n    {\n        exports.dealloc32(arr.ptr, arr.len);\n    },\n    /**\n     * extracts the frequencies out of a signal, overwriting the input\n     * buffer of `f32` samples with half as many `(f32, f32)`(packed)\n     * tuples representing (frequency, amplitude)\n     * \n     * @param {WasmArray} pcm input samples, of some power of 2 length\n     * @param {number} fs sampling frequency\n     * @returns {WasmArray} (frequency, amplitude)[pcm.len / 2]\n     */\n    frequencies(pcm, fs)\n    {\n        exports.frequencies(pcm.ptr, pcm.len, fs);\n\n        return pcm;\n    },\n    /**\n     * performs the hamming windowing function to the buffer of PCM\n     * data\n     * @param {WasmArray} pcm audio signal data\n     * @returns {WasmArray} pcm passed in\n     */\n    hamming(pcm)\n    {\n        exports.hamming(pcm.ptr, pcm.len);\n\n        return pcm;\n    }\n}", "const w = window.innerWidth;\nconst h = window.innerHeight;\n\nconst c = document.body.appendChild(document.createElement('canvas'));\n\nc.width = w;\nc.height = 1024 / 2;\n\nconst d = c.getContext('2d');\n\nd.strokeStyle = '#ff0000';\nd.lineWidth = 1;\n\nlet x = -1, y = -1;\n/** @type {ImageData} */\nlet col = undefined;\n\nexport default\n{\n    step()\n    {\n        if (col)\n        {\n            d.putImageData(col, x, 0);\n        }\n\n        y = -1;\n        x = (x + 1) % w;\n\n        col = d.getImageData(x, 0, 1, c.height);\n\n        d.beginPath();\n        d.moveTo((x + 1) % w, 0);\n        d.lineTo((x + 1) % w, c.height);\n        d.stroke();\n    },\n    put(val)\n    {\n        y += 1;\n\n        val = Math.round(Math.max(Math.min(val, 255 * 3), 0));\n\n        col.data[y * 4 + 0] = val;\n        col.data[y * 4 + 1] = Math.max(val -= 255, 0);\n        col.data[y * 4 + 2] = Math.max(val -= 255, 0);\n        col.data[y * 4 + 3] = 255;\n    },\n\n}", "/**\n * creates a new audio processor, working with `samples`\n * samples of PCM data from microphone audio input\n * \n * @param {number} samples number of samples desired at once\n * @param {function(Float32Array, number)} processor audio processor(samples, sampling frequency)\n */\nexport default async (samples, processor) =>\n{\n    /** @type {AudioContext} */\n    const context = new (window.AudioContext || window.webkitAudioContext)();\n    /** @type {MediaStreamAudioSourceNode} */\n    const source = context\n        .createMediaStreamSource(await navigator.mediaDevices\n            .getUserMedia({ audio: true, video: false })\n        );\n    /** @type {ScriptProcessorNode} */\n    const recorder = (context.createScriptProcessor || context.createJavaScriptNode).call(context, samples, 1, 1);\n    \n    // TODO use modern API https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode\n\n    // run processor on raw audio samples\n    recorder.onaudioprocess = e => processor(e.inputBuffer.getChannelData(0), context.sampleRate);\n    // link new recorder\n    source.connect(recorder);\n    recorder.connect(context.destination);\n}", "import wasm from '../rs/mod'\nimport draw from './draw';\nimport mic from './mic';\n\nconst main = async () =>\n{\n    await wasm.load();\n\n    const pcm = wasm.alloc(1024);\n    const old = new Float32Array(pcm.len / 2);\n\n    await mic(pcm.len, (samples, fs) =>\n    {\n        // for old = [staging buffer], pcm = [fft buffer]\n        //\n        // 1. copy [staging buffer] to left of [fft buffer]\n        // 2. copy left of [new pcm] to right of [fft buffer]\n        // 3. copy right of [new pcm] to [staging buffer]\n        // 4. apply windowing fn to [fft buffer]\n        // 5. run fft on [fft buffer]\n\n        // left, right\n        const lfft = pcm.f32.subarray(0, pcm.len / 2);\n        const rfft = pcm.f32.subarray(pcm.len / 2);\n        const lnew = samples.subarray(0, samples.length / 2);\n        const rnew = samples.subarray(samples.length / 2);\n\n        // 1.\n        lfft.set(old);\n        // 2.\n        rfft.set(lnew);\n        // 3.\n        old.set(rnew);\n        // 4.\n        wasm.hamming(pcm);\n        // 5.\n        wasm.frequencies(pcm, fs);\n\n        // draw\n        draw.step();\n        for (let i = 0; i < pcm.len; i += 2)\n        {\n            draw.put(Math.log10(pcm.f32[i + 1] * 1000) * 500);\n        }\n    })\n    //wasm.dealloc(arr);\n}\n\nmain();"],
  "mappings": "y+8DAGY,GAAO,GAAQ,AAAC,GAAY,YACvB,YAAY,EAAM,GAClB,KAAK,GAAU,EAAO,SAAS,SCFhD,GAAI,GAGG,EACP,MAEU,OACN,CACI,EAAU,KAAM,KAEhB,QAAQ,IAAI,OAIZ,SAAS,CAAE,MAAO,GAAQ,QAG9B,IAAK,KACL,CAMI,YAAY,EAAK,EACjB,CAEI,KAAK,IAAM,IAAM,EAAQ,OAAO,OAEhC,KAAK,IAAM,EACX,KAAK,IAAM,KAGX,MAAM,CAAE,MAAO,IAAI,YAAW,KAAK,MAAO,KAAK,IAAK,KAAK,QAEzD,MAAM,CAAE,MAAO,IAAI,cAAa,KAAK,MAAO,KAAK,IAAK,KAAK,OAMnE,MAAM,EACN,CACI,MAAO,IAAI,MAAK,IAAI,EAAQ,QAAQ,GAAM,IAM9C,QAAQ,EACR,CACI,EAAQ,UAAU,EAAI,IAAK,EAAI,MAWnC,YAAY,EAAK,EACjB,CACI,SAAQ,YAAY,EAAI,IAAK,EAAI,IAAK,GAE/B,GAQX,QAAQ,EACR,CACI,SAAQ,QAAQ,EAAI,IAAK,EAAI,KAEtB,ICjFf,GAAM,GAAI,OAAO,WACX,EAAI,OAAO,YAEX,EAAI,SAAS,KAAK,YAAY,SAAS,cAAc,WAE3D,EAAE,MAAQ,EACV,EAAE,OAAS,KAAO,EAElB,GAAM,GAAI,EAAE,WAAW,MAEvB,EAAE,YAAc,UAChB,EAAE,UAAY,EAEd,GAAI,GAAI,GAAI,EAAI,GAEZ,EAEG,EACP,CACI,MACA,CACI,AAAI,GAEA,EAAE,aAAa,EAAK,EAAG,GAG3B,EAAI,GACJ,EAAK,GAAI,GAAK,EAEd,EAAM,EAAE,aAAa,EAAG,EAAG,EAAG,EAAE,QAEhC,EAAE,YACF,EAAE,OAAQ,GAAI,GAAK,EAAG,GACtB,EAAE,OAAQ,GAAI,GAAK,EAAG,EAAE,QACxB,EAAE,UAEN,IAAI,EACJ,CACI,GAAK,EAEL,EAAM,KAAK,MAAM,KAAK,IAAI,KAAK,IAAI,EAAK,IAAM,GAAI,IAElD,EAAI,KAAK,EAAI,EAAI,GAAK,EACtB,EAAI,KAAK,EAAI,EAAI,GAAK,KAAK,IAAI,GAAO,IAAK,GAC3C,EAAI,KAAK,EAAI,EAAI,GAAK,KAAK,IAAI,GAAO,IAAK,GAC3C,EAAI,KAAK,EAAI,EAAI,GAAK,MCtC9B,GAAO,GAAQ,MAAO,EAAS,IAC/B,CAEI,GAAM,GAAU,GAAK,QAAO,cAAgB,OAAO,oBAE7C,EAAS,EACV,wBAAwB,KAAM,WAAU,aACpC,aAAa,CAAE,MAAO,GAAM,MAAO,MAGtC,EAAY,GAAQ,uBAAyB,EAAQ,sBAAsB,KAAK,EAAS,EAAS,EAAG,GAK3G,EAAS,eAAiB,GAAK,EAAU,EAAE,YAAY,eAAe,GAAI,EAAQ,YAElF,EAAO,QAAQ,GACf,EAAS,QAAQ,EAAQ,cCrB7B,GAAM,GAAO,SACb,CACI,KAAM,GAAK,OAEX,GAAM,GAAM,EAAK,MAAM,MACjB,EAAM,GAAI,cAAa,EAAI,IAAM,GAEvC,KAAM,GAAI,EAAI,IAAK,CAAC,EAAS,IAC7B,CAUI,GAAM,GAAO,EAAI,IAAI,SAAS,EAAG,EAAI,IAAM,GACrC,EAAO,EAAI,IAAI,SAAS,EAAI,IAAM,GAClC,EAAO,EAAQ,SAAS,EAAG,EAAQ,OAAS,GAC5C,EAAO,EAAQ,SAAS,EAAQ,OAAS,GAG/C,EAAK,IAAI,GAET,EAAK,IAAI,GAET,EAAI,IAAI,GAER,EAAK,QAAQ,GAEb,EAAK,YAAY,EAAK,GAGtB,EAAK,OACL,OAAS,GAAI,EAAG,EAAI,EAAI,IAAK,GAAK,EAE9B,EAAK,IAAI,KAAK,MAAM,EAAI,IAAI,EAAI,GAAK,KAAQ,QAMzD",
  "names": []
}
