{
  "version": 3,
  "sources": ["wasm-stub:/Users/yohan/dev/sightread/src/rs/mod.wasm", "../src/rs/mod.js", "../src/js/draw.js", "../src/js/mic.js", "../src/js/main.js"],
  "sourcesContent": ["\n            import wasm from \"/Users/yohan/dev/sightread/src/rs/mod.wasm\"\n\n            export default (imports) => WebAssembly\n                .instantiate(wasm, imports)\n                .then(result => result.instance.exports)\n            ", "import load from './mod.wasm'\n\n/** @type {WebAssembly.Exports} */\nlet exports = undefined;\n\n/** bindings over WASM module */\nexport default\n{\n    /** begins loading the WASM module */\n    async load()\n    {\n        exports = await load();\n\n        console.log(exports)\n    },\n\n    /** @returns {WebAssembly.Memory} */\n    get memory() { return exports.memory },\n\n    /** a wrapper over wasm memory, with 32-bit elements */\n    arr: class WasmArray\n    {\n        /**\n         * create a new wrapper over wasm memory \n         * @param {number} ptr byte offset, aligned to 32-bits\n         * @param {number} len number of elements\n         */\n        constructor(ptr, len)\n        {\n            /** @type {ArrayBuffer} */\n            this.buf = () => exports.memory.buffer;\n\n            this.ptr = ptr;\n            this.len = len;\n        }\n        /** interpret this array as an `i32[]` */\n        get i32() { return new Int32Array(this.buf(), this.ptr, this.len) }\n        /** interpret this array as an `f32[]` */\n        get f32() { return new Float32Array(this.buf(), this.ptr, this.len) }\n    },\n    /**\n     * allocate a new array in WASM memory\n     * @param {number} len length of array to allocate\n     */\n    alloc(len)\n    {\n        return new this.arr(exports.alloc32(len), len)\n    },\n    /**\n     * deallocate an array allocated with `alloc` in WASM memory\n     * @param {WasmArray} arr array to deallocate\n     */\n    dealloc(arr)\n    {\n        exports.dealloc32(arr.ptr, arr.len);\n    },\n    /**\n     * extracts the frequencies out of a signal, overwriting the input\n     * buffer of `f32` samples with half as many `(f32, f32)`(packed)\n     * tuples representing (frequency, amplitude)\n     * \n     * @param {WasmArray} pcm input samples, of some power of 2 length\n     * @param {number} fs sampling frequency\n     * @returns {WasmArray} (frequency, amplitude)[pcm.len / 2]\n     */\n    frequencies(pcm, fs)\n    {\n        exports.frequencies(pcm.ptr, pcm.len, fs);\n\n        return pcm;\n    }\n}", "const w = window.innerWidth;\nconst h = window.innerHeight;\n\nconst svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\nconst lin = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');\n\nsvg.setAttribute('width', w);\nsvg.setAttribute('height', h);\n\nlin.style.stroke = '#000';\nlin.style.strokeWidth = '5px';\nlin.style.fill = 'none';\n\nsvg.appendChild(lin);\ndocument.body.appendChild(svg);\n\nexport default\n{\n    pts: \"\",\n    begin()\n    {\n        this.pts = \"\";\n    },\n    add(frq, amp, len)\n    {\n        this.pts += `${frq * (w / len)}, ${h - 30 - amp * (h * 0.9)} `\n    },\n    end()\n    {\n        lin.setAttribute('points', this.pts);\n    }\n}", "/**\n * creates a new audio processor, working with `samples`\n * samples of PCM data from microphone audio input\n * \n * @param {number} samples number of samples desired at once\n * @param {function(Float32Array, number)} processor audio processor(samples, sampling frequency)\n */\nexport default async (samples, processor) =>\n{\n    /** @type {AudioContext} */\n    const context = new (window.AudioContext || window.webkitAudioContext)();\n    /** @type {MediaStreamAudioSourceNode} */\n    const source = context\n        .createMediaStreamSource(await navigator.mediaDevices\n            .getUserMedia({ audio: true, video: false })\n        );\n    /** @type {ScriptProcessorNode} */\n    const recorder = (context.createScriptProcessor || context.createJavaScriptNode).call(context, samples, 1, 1);\n    \n    // run processor on raw audio samples\n    recorder.onaudioprocess = e => processor(e.inputBuffer.getChannelData(0), context.sampleRate);\n    // link new recorder\n    source.connect(recorder);\n    recorder.connect(context.destination);\n}", "import wasm from '../rs/mod'\nimport draw from './draw';\nimport mic from './mic';\n\nconst main = async () =>\n{\n    await wasm.load();\n\n    const pcm = wasm.alloc(4096);\n\n    await mic(4096, (samples, fs) =>\n    {\n        // copy over data\n        pcm.f32.set(samples);\n        // FFT\n        let fft = wasm.frequencies(pcm, fs);\n\n        // draw\n        draw.begin()\n        for (let i = 0; i < pcm.len; i += 2)\n        {\n            draw.add(fft.f32[i], fft.f32[i + 1] * 10, pcm.len);\n        }\n        draw.end()\n    })\n    //wasm.dealloc(arr);\n}\n\nmain();"],
  "mappings": "imtDAGY,GAAO,GAAQ,AAAC,GAAY,YACvB,YAAY,EAAM,GAClB,KAAK,GAAU,EAAO,SAAS,SCFhD,GAAI,GAGG,EACP,MAEU,OACN,CACI,EAAU,KAAM,KAEhB,QAAQ,IAAI,OAIZ,SAAS,CAAE,MAAO,GAAQ,QAG9B,IAAK,KACL,CAMI,YAAY,EAAK,EACjB,CAEI,KAAK,IAAM,IAAM,EAAQ,OAAO,OAEhC,KAAK,IAAM,EACX,KAAK,IAAM,KAGX,MAAM,CAAE,MAAO,IAAI,YAAW,KAAK,MAAO,KAAK,IAAK,KAAK,QAEzD,MAAM,CAAE,MAAO,IAAI,cAAa,KAAK,MAAO,KAAK,IAAK,KAAK,OAMnE,MAAM,EACN,CACI,MAAO,IAAI,MAAK,IAAI,EAAQ,QAAQ,GAAM,IAM9C,QAAQ,EACR,CACI,EAAQ,UAAU,EAAI,IAAK,EAAI,MAWnC,YAAY,EAAK,EACjB,CACI,SAAQ,YAAY,EAAI,IAAK,EAAI,IAAK,GAE/B,ICrEf,GAAM,GAAI,OAAO,WACX,EAAI,OAAO,YAEX,EAAM,SAAS,gBAAgB,6BAA8B,OAC7D,EAAM,SAAS,gBAAgB,6BAA8B,YAEnE,EAAI,aAAa,QAAS,GAC1B,EAAI,aAAa,SAAU,GAE3B,EAAI,MAAM,OAAS,OACnB,EAAI,MAAM,YAAc,MACxB,EAAI,MAAM,KAAO,OAEjB,EAAI,YAAY,GAChB,SAAS,KAAK,YAAY,GAE1B,GAAO,GACP,CACI,IAAK,GACL,OACA,CACI,KAAK,IAAM,IAEf,IAAI,EAAK,EAAK,EACd,CACI,KAAK,KAAO,GAAG,EAAO,GAAI,OAAS,EAAI,GAAK,EAAO,GAAI,QAE3D,KACA,CACI,EAAI,aAAa,SAAU,KAAK,OCtBxC,GAAO,GAAQ,MAAO,EAAS,IAC/B,CAEI,GAAM,GAAU,GAAK,QAAO,cAAgB,OAAO,oBAE7C,EAAS,EACV,wBAAwB,KAAM,WAAU,aACpC,aAAa,CAAE,MAAO,GAAM,MAAO,MAGtC,EAAY,GAAQ,uBAAyB,EAAQ,sBAAsB,KAAK,EAAS,EAAS,EAAG,GAG3G,EAAS,eAAiB,GAAK,EAAU,EAAE,YAAY,eAAe,GAAI,EAAQ,YAElF,EAAO,QAAQ,GACf,EAAS,QAAQ,EAAQ,cCnB7B,GAAM,GAAO,SACb,CACI,KAAM,GAAK,OAEX,GAAM,GAAM,EAAK,MAAM,MAEvB,KAAM,GAAI,KAAM,CAAC,EAAS,IAC1B,CAEI,EAAI,IAAI,IAAI,GAEZ,GAAI,GAAM,EAAK,YAAY,EAAK,GAGhC,EAAK,QACL,OAAS,GAAI,EAAG,EAAI,EAAI,IAAK,GAAK,EAE9B,EAAK,IAAI,EAAI,IAAI,GAAI,EAAI,IAAI,EAAI,GAAK,GAAI,EAAI,KAElD,EAAK,SAKb",
  "names": []
}
